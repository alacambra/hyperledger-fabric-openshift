---
- hosts: localhost
  connection: local
  vars:
    project_name: "myproject"
    username: "your-user"
    password: "your-pass"
  tasks:

  #- name: login as system:admin
  #  shell: oc login -u system:admin

  - name: login as system:admin
    shell: "oc login -u {{ username }} -p {{ password }} https://master.portoalegre-fad8.openshiftworkshop.com"

  - name: Create myproject
    shell: "oc new-project myproject || echo 'já existe'"

  - name: Add permissions
    shell: "oc adm policy add-scc-to-user anyuid -z default -n myproject && oc adm policy add-scc-to-user privileged -z default -n myproject"

  - name: Create pvc
    shell: "oc apply -f kubernetes/fabric-pvc-nolabel.yaml -n myproject"

  - name: Create Fabric Tools Helper
    shell: "oc apply -f kubernetes/fabric-tools.yaml -n myproject"
 
  - name: Wait fabric container to be running
    shell: "oc get po -n myproject | grep -i fabric"
    register: fabric_container
    until: fabric_container.stdout.find("Running") != -1
    retries: 60
    delay: 20
  
  - name: Create fabric tools dirs
    shell: "oc -n myproject exec -it fabric-tools -- mkdir /fabric/config || echo existe"

  - name: Copy files to fabric tools containers
    shell: "oc -n myproject cp {{ item }} fabric-tools:/fabric/config/"
    with_items:
       - config/configtx.yaml
       - config/crypto-config.yaml
       - config/chaincode/
       - instantiate_chaincode.sh
    ignore_errors: true
  
  - name: Cryptogen
    shell: oc -n myproject exec fabric-tools -- bash -c "cryptogen generate --config /fabric/config/crypto-config.yaml"
  
  - name: Copy files 1
    shell: oc -n myproject exec fabric-tools -- cp -r crypto-config /fabric/
  
  - name: Copy files 2
    shell: oc -n myproject exec fabric-tools -- bash -c 'for file in $(find /fabric/ -iname *_sk); do echo $file; dir=$(dirname $file); mv ${dir}/*_sk ${dir}/key.pem; done'

  - name: Generate genesis block
    shell: oc -n myproject exec fabric-tools -- bash -c "cp /fabric/config/configtx.yaml /fabric/ && cd /fabric && configtxgen -profile FourOrgsOrdererGenesis -outputBlock genesis.block"

  - name: Create Anchor Peers
    shell: oc -n myproject exec fabric-tools -- bash -c "{{ item }}"
    with_items:
      - "cd /fabric && configtxgen -profile FourOrgsChannel -outputAnchorPeersUpdate ./Org1MSPanchors.tx -channelID channel1 -asOrg Org1MSP"
      - "cd /fabric && configtxgen -profile FourOrgsChannel -outputAnchorPeersUpdate ./Org2MSPanchors.tx -channelID channel1 -asOrg Org2MSP"
      - "cd /fabric && configtxgen -profile FourOrgsChannel -outputAnchorPeersUpdate ./Org3MSPanchors.tx -channelID channel1 -asOrg Org3MSP"
      - "cd /fabric && configtxgen -profile FourOrgsChannel -outputAnchorPeersUpdate ./Org4MSPanchors.tx -channelID channel1 -asOrg Org4MSP"

  - name: Fix permissions
    shell: oc -n myproject exec fabric-tools -- bash -c "chmod a+rx /fabric/* -R"

  - name: Create Blockchain-ca deploy
    shell: oc -n myproject apply -f kubernetes/blockchain-ca_deploy.yaml

  - name: Create service deploy
    shell: oc -n myproject apply -f kubernetes/blockchain-ca_svc.yaml

  - name: Install zookeeper and kafka
    shell: "oc apply -f kafka -n {{ project_name }}"

  - name: Create Orderer
    shell: oc -n myproject apply -f kubernetes/blockchain-orderer_deploy.yaml

  - name: Create orderer svc
    shell: "oc expose deployment blockchain-orderer --port=31010 -n {{ project_name }} || echo 'já existe'"

  - name: Create org1 and peer
    shell: oc -n myproject apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org1peer1_deploy.yaml
      - kubernetes/blockchain-org1peer2_deploy.yaml
      - kubernetes/blockchain-org1peer1_svc.yaml
      - kubernetes/blockchain-org1peer2_svc.yaml
  
  - name: Create org2 and peer
    shell: oc -n myproject apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org2peer1_deploy.yaml
      - kubernetes/blockchain-org2peer2_deploy.yaml
      - kubernetes/blockchain-org2peer1_svc.yaml
      - kubernetes/blockchain-org2peer2_svc.yaml

  - name: Create org3 and peer
    shell: oc -n myproject apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org3peer1_deploy.yaml
      - kubernetes/blockchain-org3peer2_deploy.yaml
      - kubernetes/blockchain-org3peer1_svc.yaml
      - kubernetes/blockchain-org3peer2_svc.yaml

  - name: Create org4 and peer
    shell: oc -n myproject apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org4peer1_deploy.yaml
      - kubernetes/blockchain-org4peer2_deploy.yaml
      - kubernetes/blockchain-org4peer1_svc.yaml
      - kubernetes/blockchain-org4peer2_svc.yaml

  - name: Create channel
    shell: >
      oc exec fabric-tools -- bash -c 'export FABRIC_CFG_PATH=/fabric && export CHANNEL_NAME="channel1" && export ORDERER_URL="blockchain-orderer:31010" && export CORE_PEER_ADDRESSAUTODETECT="false" && export CORE_PEER_NETWORKID="nid1" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/" && cd /fabric && configtxgen -profile FourOrgsChannel -outputCreateChannelTx ${CHANNEL_NAME}.tx -channelID ${CHANNEL_NAME} && export FABRIC_CFG_PATH=/etc/hyperledger/fabric && peer channel create -o ${ORDERER_URL} -c ${CHANNEL_NAME} -f /fabric/${CHANNEL_NAME}.tx'

  - name: Join Org1MSP to Our Channel
    shell: >
      oc exec fabric-tools -- bash -c 'export CHANNEL_NAME="channel1" && export CORE_PEER_NETWORKID="nid1" && export ORDERER_URL="blockchain-orderer:31010" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_MSPID="Org1MSP" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_ADDRESS="blockchain-org1peer1:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block && export CORE_PEER_ADDRESS="blockchain-org1peer2:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block'

  - name: Join Org2MSP to Our Channel
    shell: > 
      oc exec fabric-tools -- bash -c 'export CHANNEL_NAME="channel1" && export CORE_PEER_NETWORKID="nid1" && export ORDERER_URL="blockchain-orderer:31010" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_MSPID="Org2MSP" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_ADDRESS="blockchain-org2peer1:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block && export CORE_PEER_ADDRESS="blockchain-org2peer2:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block'

  - name: Join Org3MSP to Our Channel
    shell: >
      oc exec fabric-tools -- bash -c 'export CHANNEL_NAME="channel1" && export CORE_PEER_NETWORKID="nid1" && export ORDERER_URL="blockchain-orderer:31010" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_LOCALMSPID="Org3MSP" && export CORE_PEER_MSPID="Org3MSP" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp" && export CORE_PEER_ADDRESS="blockchain-org3peer1:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block && export CORE_PEER_ADDRESS="blockchain-org3peer2:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block'

  - name: Join Org4MSP to Our Channel
    shell: >
      oc exec fabric-tools -- bash -c 'export CHANNEL_NAME="channel1" && export CORE_PEER_NETWORKID="nid1" && export ORDERER_URL="blockchain-orderer:31010" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_LOCALMSPID="Org4MSP" && export CORE_PEER_MSPID="Org4MSP" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp" && export CORE_PEER_ADDRESS="blockchain-org4peer1:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block && export CORE_PEER_ADDRESS="blockchain-org4peer2:30110" && peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} && peer channel join -b ${CHANNEL_NAME}_newest.block && rm -rf /${CHANNEL_NAME}_newest.block'

  - name: Install Chaincode on Org1MSP
    shell: >
      oc exec fabric-tools -- bash -c 'cp -r /fabric/config/chaincode $GOPATH/src/ && export CHAINCODE_NAME="cc" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="blockchain-org1peer1:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/ && export CORE_PEER_ADDRESS="blockchain-org1peer2:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/'

  - name: Install Chaincode on Org2MSP
    shell: >
      oc exec fabric-tools -- bash -c 'cp -r /fabric/config/chaincode $GOPATH/src/ && export CHAINCODE_NAME="cc" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="blockchain-org2peer1:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/ && export CORE_PEER_ADDRESS="blockchain-org2peer2:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/'

  - name: Install Chaincode on Org3MSP
    shell: >
      oc exec -it fabric-tools -- bash -c 'cp -r /fabric/config/chaincode $GOPATH/src/ && export CHAINCODE_NAME="cc" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp" && export CORE_PEER_LOCALMSPID="Org3MSP" && export CORE_PEER_ADDRESS="blockchain-org3peer1:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/ && export CORE_PEER_ADDRESS="blockchain-org3peer2:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/'

  - name: Install Chaincode on Org4MSP
    shell: >
      oc exec -it fabric-tools -- bash -c 'cp -r /fabric/config/chaincode $GOPATH/src/ && export CHAINCODE_NAME="cc" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp" && export CORE_PEER_LOCALMSPID="Org4MSP" && export CORE_PEER_ADDRESS="blockchain-org4peer1:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/ && export CORE_PEER_ADDRESS="blockchain-org4peer2:30110" && peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p chaincode_example02/'

  - name: Instantiate Chaincode part 1
    shell: oc exec -it fabric-tools -- bash -c '/fabric/config/instantiate_chaincode.sh'

  - name: Update channel from org1 to reflect Anchor Peers
    shell: |
      pod=$(oc get pods | grep blockchain-org1peer1 | awk '{print $1}')
      oc exec $pod -- peer channel update -f /fabric/Org1MSPanchors.tx -c channel1 -o blockchain-orderer:31010
  
  - name: Update channel from org2 to reflect Anchor Peers
    shell: |
      pod=$(oc get pods | grep blockchain-org2peer1 | awk '{print $1}')
      oc exec $pod -- peer channel update -f /fabric/Org2MSPanchors.tx -c channel1 -o blockchain-orderer:31010

  - name: Update channel from org3 to reflect Anchor Peers
    shell: |
      pod=$(oc get pods | grep blockchain-org3peer1 | awk '{print $1}')
      oc exec $pod -- peer channel update -f /fabric/Org3MSPanchors.tx -c channel1 -o blockchain-orderer:31010

  - name: Update channel from org4 to reflect Anchor Peers
    shell: |
      pod=$(oc get pods | grep blockchain-org4peer1 | awk '{print $1}')
      oc exec $pod -- peer channel update -f /fabric/Org4MSPanchors.tx -c channel1 -o blockchain-orderer:31010
  
  - name: Deploy Hyperledger Explorer Database
    shell: oc apply -f kubernetes/blockchain-explorer-db_deploy.yaml

  - name: Create Explorer Service
    shell: oc apply -f kubernetes/blockchain-explorer-db_svc.yaml

  - name: Wait for postgresql to be ready
    shell: oc get po -n myproject | grep -i blockchain-explorer-db
    register: postgresql_explorer
    until: postgresql_explorer.stdout.find("Running") != -1
    retries: 60
    delay: 40

  - name: Populate database
    shell: |
      pod=$(oc get pods | grep blockchain-explorer-db | awk '{print $1}')
      oc exec $pod -- bash -c 'mkdir -p /fabric/config/explorer/db/ && mkdir -p /fabric/config/explorer/app/ && cd /fabric/config/explorer/db/ && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/createdb.sh -O createdb.sh && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/explorerpg.sql -O explorerpg.sql && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/processenv.js -O processenv.js && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/updatepg.sql -O updatepg.sql && apk update && apk add jq ; apk add nodejs ; apk add sudo ; rm -rf /var/cache/apk/* && chmod +x ./createdb.sh && ./createdb.sh'

  - name: Copy network file
    shell: oc cp config/explorer/app/config.json fabric-tools:/fabric/config/explorer/app/
    ignore_errors: true

  - name: Copy run.sh
    shell: chmod +x config/explorer/app/run.sh && oc cp config/explorer/app/run.sh fabric-tools:/fabric/config/explorer/app/
    ignore_errors: true
    
  - name: Deploy explorer
    shell: "oc apply -f kubernetes/blockchain-explorer-app_deploy.yaml -n {{ project_name }}"

  - name: Create explorer svc
    shell: "oc expose deployment blockchain-explorer-app --port=8080 -n {{ project_name }} || echo 'ja existe'"

  - name: Create explorer route
    shell: "oc expose svc/blockchain-explorer-app -n {{ project_name }} || echo 'ja existe'"

  - name: Remove helper pod
    shell: oc delete -f kubernetes/fabric-tools.yaml